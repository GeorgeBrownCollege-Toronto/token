{
  "contractName": "RelevantTokenMock",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_amount",
          "type": "uint256"
        },
        {
          "name": "_sig",
          "type": "bytes"
        }
      ],
      "name": "claimTokens",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "targetRound",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_rewards",
          "type": "uint256"
        }
      ],
      "name": "allocateRewards",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initRoundReward",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_name",
          "type": "string"
        },
        {
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "name": "_symbol",
          "type": "string"
        },
        {
          "name": "_version",
          "type": "string"
        },
        {
          "name": "_devFundAddress",
          "type": "address"
        },
        {
          "name": "_initRoundReward",
          "type": "uint256"
        },
        {
          "name": "_timeConstant",
          "type": "uint256"
        },
        {
          "name": "_targetInflation",
          "type": "uint256"
        },
        {
          "name": "_targetRound",
          "type": "uint256"
        },
        {
          "name": "_roundLength",
          "type": "uint256"
        },
        {
          "name": "_roundDecay",
          "type": "uint256"
        },
        {
          "name": "_totalPremint",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "timeConstant",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "roundsSincleLast",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "airdropSwitchRound",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "roundDecay",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "targetInflation",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "allocatedRewards",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "lastRound",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "currentRound",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "developmentFund",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "roundLength",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_round",
          "type": "uint256"
        }
      ],
      "name": "partialSum",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceMinter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "lastRoundAirdrop",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "currRoundReward",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "releaseTokens",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "devFundAddress",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "reserveFund",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_rewards",
          "type": "uint256"
        }
      ],
      "name": "allocateAirdrops",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "airdropRoundDecay",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "lastRoundReward",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalPremint",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalReleased",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initRoundAirdrop",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "nonceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_airdropSwitchRound",
          "type": "uint256"
        },
        {
          "name": "_airdropRoundDecay",
          "type": "uint256"
        },
        {
          "name": "_firstNewAirdrop",
          "type": "uint256"
        }
      ],
      "name": "initializeRewardSplit",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rewardFund",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "allocatedAirdrops",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "airdropFund",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "releasableTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "rewardFund",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "airdropFund",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "developmentFund",
          "type": "uint256"
        }
      ],
      "name": "Released",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "roundNum",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_roundNum",
          "type": "uint256"
        }
      ],
      "name": "setRoundNum",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_roundNum",
          "type": "uint256"
        },
        {
          "name": "_lastRoundReward",
          "type": "uint256"
        },
        {
          "name": "_totalReleased",
          "type": "uint256"
        }
      ],
      "name": "setLastRound",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "emptyDevBalance",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b50614379806100206000396000f3fe6080604052600436106102b4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146102b9578063095ea7b314610349578063119b22b3146103bc57806314d8bbf1146103e75780631727bcc7146104d157806318160ddd146104fc57806323b872dd1461052757806328fc33c7146105ba57806329a0f85b1461060d578063313ce567146106385780633180bfe11461066957806339509351146108d357806340c10f191461094657806343568eae146109b957806348cd4cb1146109e45780634cf9b9aa14610a0f5780634e33946114610a3a57806354fd4d5014610a9d5780635f04d72414610b2d578063672ff5d414610b5857806370a0823114610b83578063715018a614610be85780637581d1d114610bff5780637d556df014610c2a57806382bc07e614610c555780638a19c8bc14610c805780638a2381d714610cab5780638b649b9414610cd65780638da5cb5b14610d015780638f32d59b14610d5857806395d89b4114610d875780639701fa3414610e17578063983b2d5614610e665780639865027514610eb7578063a0ef67f214610ece578063a457c2d714610ef9578063a59efddd14610f6c578063a9059cbb14610f97578063a96f86681461100a578063aa271e1a14611039578063b480f6ad146110a2578063b7f92b71146110f9578063c4d66de814611124578063ca6da57e14611175578063d1cc5f93146111c8578063d7568324146111f3578063dd62ed3e1461121e578063de70289e146112a3578063dea95ff8146112ce578063e33b7de31461131d578063e5e90e2614611348578063e5f2e38314611373578063ed2a2d641461138a578063ee497bcb146113ef578063efe222661461143e578063f2fde38b14611469578063f73c1390146114ba578063fd6a93fb146114e5575b600080fd5b3480156102c557600080fd5b506102ce611510565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561030e5780820151818401526020810190506102f3565b50505050905090810190601f16801561033b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561035557600080fd5b506103a26004803603604081101561036c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115af565b604051808215151515815260200191505060405180910390f35b3480156103c857600080fd5b506103d16116dc565b6040518082815260200191505060405180910390f35b3480156103f357600080fd5b506104b76004803603604081101561040a57600080fd5b81019080803590602001909291908035906020019064010000000081111561043157600080fd5b82018360208201111561044357600080fd5b8035906020019184600183028401116401000000008311171561046557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506116e7565b604051808215151515815260200191505060405180910390f35b3480156104dd57600080fd5b506104e6611a84565b6040518082815260200191505060405180910390f35b34801561050857600080fd5b50610511611a8b565b6040518082815260200191505060405180910390f35b34801561053357600080fd5b506105a06004803603606081101561054a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611a95565b604051808215151515815260200191505060405180910390f35b3480156105c657600080fd5b506105f3600480360360208110156105dd57600080fd5b8101908080359060200190929190505050611c9d565b604051808215151515815260200191505060405180910390f35b34801561061957600080fd5b50610622611d96565b6040518082815260200191505060405180910390f35b34801561064457600080fd5b5061064d611d9d565b604051808260ff1660ff16815260200191505060405180910390f35b34801561067557600080fd5b506108d1600480360361018081101561068d57600080fd5b81019080803590602001906401000000008111156106aa57600080fd5b8201836020820111156106bc57600080fd5b803590602001918460018302840111640100000000831117156106de57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff1690602001909291908035906020019064010000000081111561074e57600080fd5b82018360208201111561076057600080fd5b8035906020019184600183028401116401000000008311171561078257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156107e557600080fd5b8201836020820111156107f757600080fd5b8035906020019184600183028401116401000000008311171561081957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190505050611db1565b005b3480156108df57600080fd5b5061092c600480360360408110156108f657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612013565b604051808215151515815260200191505060405180910390f35b34801561095257600080fd5b5061099f6004803603604081101561096957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061224a565b604051808215151515815260200191505060405180910390f35b3480156109c557600080fd5b506109ce612274565b6040518082815260200191505060405180910390f35b3480156109f057600080fd5b506109f961227b565b6040518082815260200191505060405180910390f35b348015610a1b57600080fd5b50610a24612282565b6040518082815260200191505060405180910390f35b348015610a4657600080fd5b50610a8760048036036060811015610a5d57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050612296565b6040518082815260200191505060405180910390f35b348015610aa957600080fd5b50610ab26123fa565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610af2578082015181840152602081019050610ad7565b50505050905090810190601f168015610b1f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610b3957600080fd5b50610b42612499565b6040518082815260200191505060405180910390f35b348015610b6457600080fd5b50610b6d6124a0565b6040518082815260200191505060405180910390f35b348015610b8f57600080fd5b50610bd260048036036020811015610ba657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124a7565b6040518082815260200191505060405180910390f35b348015610bf457600080fd5b50610bfd6124f0565b005b348015610c0b57600080fd5b50610c146125c4565b6040518082815260200191505060405180910390f35b348015610c3657600080fd5b50610c3f6125cb565b6040518082815260200191505060405180910390f35b348015610c6157600080fd5b50610c6a6125d2565b6040518082815260200191505060405180910390f35b348015610c8c57600080fd5b50610c956125d9565b6040518082815260200191505060405180910390f35b348015610cb757600080fd5b50610cc06125e0565b6040518082815260200191505060405180910390f35b348015610ce257600080fd5b50610ceb6125e7565b6040518082815260200191505060405180910390f35b348015610d0d57600080fd5b50610d166125ee565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610d6457600080fd5b50610d6d612618565b604051808215151515815260200191505060405180910390f35b348015610d9357600080fd5b50610d9c612670565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610ddc578082015181840152602081019050610dc1565b50505050905090810190601f168015610e095780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610e2357600080fd5b50610e5060048036036020811015610e3a57600080fd5b810190808035906020019092919050505061270f565b6040518082815260200191505060405180910390f35b348015610e7257600080fd5b50610eb560048036036020811015610e8957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612716565b005b348015610ec357600080fd5b50610ecc612736565b005b348015610eda57600080fd5b50610ee3612741565b6040518082815260200191505060405180910390f35b348015610f0557600080fd5b50610f5260048036036040811015610f1c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612748565b604051808215151515815260200191505060405180910390f35b348015610f7857600080fd5b50610f8161297f565b6040518082815260200191505060405180910390f35b348015610fa357600080fd5b50610ff060048036036040811015610fba57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612986565b604051808215151515815260200191505060405180910390f35b34801561101657600080fd5b5061101f61299d565b604051808215151515815260200191505060405180910390f35b34801561104557600080fd5b506110886004803603602081101561105c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b67565b604051808215151515815260200191505060405180910390f35b3480156110ae57600080fd5b506110b7612b84565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561110557600080fd5b5061110e612bab565b6040518082815260200191505060405180910390f35b34801561113057600080fd5b506111736004803603602081101561114757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612bb2565b005b34801561118157600080fd5b506111ae6004803603602081101561119857600080fd5b8101908080359060200190929190505050612cf1565b604051808215151515815260200191505060405180910390f35b3480156111d457600080fd5b506111dd612dea565b6040518082815260200191505060405180910390f35b3480156111ff57600080fd5b50611208612df1565b6040518082815260200191505060405180910390f35b34801561122a57600080fd5b5061128d6004803603604081101561124157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612df8565b6040518082815260200191505060405180910390f35b3480156112af57600080fd5b506112b8612e7f565b6040518082815260200191505060405180910390f35b3480156112da57600080fd5b50611307600480360360208110156112f157600080fd5b8101908080359060200190929190505050612e86565b6040518082815260200191505060405180910390f35b34801561132957600080fd5b50611332612e9b565b6040518082815260200191505060405180910390f35b34801561135457600080fd5b5061135d612ea2565b6040518082815260200191505060405180910390f35b34801561137f57600080fd5b50611388612ea9565b005b34801561139657600080fd5b506113d9600480360360208110156113ad57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613014565b6040518082815260200191505060405180910390f35b3480156113fb57600080fd5b5061143c6004803603606081101561141257600080fd5b8101908080359060200190929190803590602001909291908035906020019092919050505061305e565b005b34801561144a57600080fd5b5061145361311f565b6040518082815260200191505060405180910390f35b34801561147557600080fd5b506114b86004803603602081101561148c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613126565b005b3480156114c657600080fd5b506114cf613145565b6040518082815260200191505060405180910390f35b3480156114f157600080fd5b506114fa61314c565b6040518082815260200191505060405180910390f35b6101008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115a75780601f1061157c576101008083540402835291602001916115a7565b820191906000526020600020905b81548152906001019060200180831161158a57829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156115ec57600080fd5b81603460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600061010d54905090565b60008261011654101515156116fb57600080fd5b6000833361011860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051602001808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182815260200193505050506040516020818303038152906040528051906020012090508060405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c01828152602001915050604051602081830303815290604052805190602001209050600061180e8285613153565b90508073ffffffffffffffffffffffffffffffffffffffff1661182f6125ee565b73ffffffffffffffffffffffffffffffffffffffff161415156118ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f436c61696d206e6f7420617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b600161011860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555061191f856101165461323790919063ffffffff16565b610116819055503073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156119c957600080fd5b505af11580156119dd573d6000803e3d6000fd5b505050506040513d60208110156119f357600080fd5b81019080805190602001909291905050501515611a78576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f5472616e7366657220746f20636c61696d616e74206661696c6564000000000081525060200191505060405180910390fd5b60019250505092915050565b6101095481565b6000603554905090565b6000611b2682603460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461323790919063ffffffff16565b603460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611bb1848484613259565b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925603460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600190509392505050565b6000611ca7612618565b1515611cb257600080fd5b610112548211151515611d53576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f4e6f7420656e6f756768206375726174696f6e2072657761726473206176616981526020017f6c61626c6500000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b611d69826101125461323790919063ffffffff16565b61011281905550611d86826101165461342990919063ffffffff16565b6101168190555060019050919050565b6101055481565b61010160009054906101000a900460ff1681565b600060019054906101000a900460ff1680611dd05750611dcf61344a565b5b80611de757506000809054906101000a900460ff16155b1515611e81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f436f6e747261637420696e7374616e63652068617320616c726561647920626581526020017f656e20696e697469616c697a656400000000000000000000000000000000000081525060400191505060405180910390fd5b60008060019054906101000a900460ff1690506001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff021916908315150217905550611ed23361345b565b611edb33612bb2565b8c6101009080519060200190611ef29291906142a8565b508b61010160006101000a81548160ff021916908360ff1602179055508a6101029080519060200190611f269291906142a8565b50896101039080519060200190611f3e9291906142a8565b508861010460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087610105819055508661010781905550856101088190555084610109819055508361010a819055508261010b819055504361010e819055506101055461010681905550600061010f8190555061010554610110819055508161010c81905550611fe98261364f565b5080600060016101000a81548160ff02191690831515021790555050505050505050505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561205057600080fd5b6120df82603460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461342990919063ffffffff16565b603460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925603460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600061225533612b67565b151561226057600080fd5b61226a8383613665565b6001905092915050565b6101075481565b61010e5481565b600061010f546122906116dc565b03905090565b60006122a0612618565b15156122ab57600080fd5b61010d548410151561234b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001807f4c6173742072656c65617365206d757374206265206265666f7265206375727281526020017f656e7420726f756e64000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8361010f819055508261011081905550816101118190555061238a600f61237c6004856137bb90919063ffffffff16565b6137f990919063ffffffff16565b610112819055506123b8600f6123aa6004856137bb90919063ffffffff16565b6137f990919063ffffffff16565b610113819055506123e6600f6123d86004856137bb90919063ffffffff16565b6137f990919063ffffffff16565b6101148190555061010f5490509392505050565b6101038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124915780601f1061246657610100808354040283529160200191612491565b820191906000526020600020905b81548152906001019060200180831161247457829003601f168201915b505050505081565b61011a5481565b61010b5481565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6124f8612618565b151561250357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6101085481565b6101165481565b61010f5481565b61010d5481565b6101155481565b61010a5481565b6000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6101028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127075780601f106126dc57610100808354040283529160200191612707565b820191906000526020600020905b8154815290600101906020018083116126ea57829003601f168201915b505050505081565b6000919050565b61271f33612b67565b151561272a57600080fd5b61273381613823565b50565b61273f3361387d565b565b61011c5481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561278557600080fd5b61281482603460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461323790919063ffffffff16565b603460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925603460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6101065481565b6000612993338484613259565b6001905092915050565b60008060006129aa6116dc565b90508061010f54101515612a26576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4e6f206e6577207265776172647320617661696c61626c65000000000000000081525060200191505060405180910390fd5b6000612a3e61010f548361323790919063ffffffff16565b90506101095461010f54101515612a74576000610111549050612a6181836138d7565b9350612a6d308561224a565b5050612acc565b61010954821015612a8f57612a8881613973565b9250612acb565b6000612a99613a22565b90506000612aa684613a47565b9050612abb818361342990919063ffffffff16565b9450612ac7308261224a565b5050505b5b612ad7838284613a96565b612adf613cba565b508161010f81905550612afe836101115461342990919063ffffffff16565b610111819055507f39c15e2884a29a8ddf54563c3cb131c46f3667ecc29b194be9f5cf91b2879725836101125461011354610115546040518085815260200184815260200183815260200182815260200194505050505060405180910390a16001935050505090565b6000612b7d82609b613e6a90919063ffffffff16565b9050919050565b61010460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6101145481565b600060019054906101000a900460ff1680612bd15750612bd061344a565b5b80612be857506000809054906101000a900460ff16155b1515612c82576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f436f6e747261637420696e7374616e63652068617320616c726561647920626581526020017f656e20696e697469616c697a656400000000000000000000000000000000000081525060400191505060405180910390fd5b60008060019054906101000a900460ff1690506001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff021916908315150217905550612cd382613efe565b80600060016101000a81548160ff0219169083151502179055505050565b6000612cfb612618565b1515612d0657600080fd5b610113548211151515612da7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f4e6f7420656e6f7567682061697264726f70207265776172647320617661696c81526020017f61626c650000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b612dbd826101135461323790919063ffffffff16565b61011381905550612dda826101175461342990919063ffffffff16565b6101178190555060019050919050565b61011b5481565b6101105481565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61010c5481565b60008161010d8190555061010d549050919050565b6101115481565b6101195481565b6000612ed761010460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166124a7565b90503073ffffffffffffffffffffffffffffffffffffffff166323b872dd61010460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610123846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015612fd557600080fd5b505af1158015612fe9573d6000803e3d6000fd5b505050506040513d6020811015612fff57600080fd5b81019080805190602001909291905050505050565b600061011860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000610119541480156130745750600061011c54145b80156130835750600061011b54145b15156130f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f416c726561647920696e697469616c697a65640000000000000000000000000081525060200191505060405180910390fd5b61010554610119819055508261011a819055508161011b819055508061011c81905550505050565b6101125481565b61312e612618565b151561313957600080fd5b6131428161404d565b50565b6101175481565b6101135481565b600080600080604185511415156131705760009350505050613231565b6020850151925060408501519150606085015160001a9050601b8160ff16101561319b57601b810190505b601b8160ff16141580156131b35750601c8160ff1614155b156131c45760009350505050613231565b60018682858560405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015613221573d6000803e3d6000fd5b5050506020604051035193505050505b92915050565b600082821115151561324857600080fd5b600082840390508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561329557600080fd5b6132e781603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461323790919063ffffffff16565b603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061337c81603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461342990919063ffffffff16565b603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600080828401905083811015151561344057600080fd5b8091505092915050565b600080303b90506000811491505090565b600060019054906101000a900460ff168061347a575061347961344a565b5b8061349157506000809054906101000a900460ff16155b151561352b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f436f6e747261637420696e7374616e63652068617320616c726561647920626581526020017f656e20696e697469616c697a656400000000000000000000000000000000000081525060400191505060405180910390fd5b60008060019054906101000a900460ff1690506001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff02191690831515021790555081606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600060016101000a81548160ff0219169083151502179055505050565b600061365b308361224a565b5060019050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156136a157600080fd5b6136b68160355461342990919063ffffffff16565b60358190555061370e81603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461342990919063ffffffff16565b603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6000808314156137ce57600090506137f3565b600082840290508284828115156137e157fe5b041415156137ee57600080fd5b809150505b92915050565b6000808211151561380957600080fd5b6000828481151561381657fe5b0490508091505092915050565b61383781609b61414990919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b61389181609b6141f990919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b600080839050600080600090505b8481101561396757600061392d61010160009054906101000a900460ff1660ff16600a0a61391f86610108546137bb90919063ffffffff16565b6137f990919063ffffffff16565b9050613942818461342990919063ffffffff16565b9250613957818561342990919063ffffffff16565b93505080806001019150506138e5565b50809250505092915050565b600080600061010f541415613989576101055490505b620186a0831015613a1857600080600090505b84811015613a11576139e561010160009054906101000a900460ff1660ff16600a0a6139d76101105461010b546137bb90919063ffffffff16565b6137f990919063ffffffff16565b91506139fa828461342990919063ffffffff16565b92508161011081905550808060010191505061399c565b5050613a19565b5b80915050919050565b600080613a3e6101115461010c5461323790919063ffffffff16565b90508091505090565b60008061010c5490506000613a7b6001613a6d610109548761323790919063ffffffff16565b61342990919063ffffffff16565b90506000613a8983836138d7565b9050809350505050919050565b6000613abf6005613ab16004876137bb90919063ffffffff16565b6137f990919063ffffffff16565b9050613aea613ad86005866137f990919063ffffffff16565b6101155461342990919063ffffffff16565b6101158190555061011a54821015613b9157613b25613b136003836137f990919063ffffffff16565b6101135461342990919063ffffffff16565b61011381905550613b55613b436003836137f990919063ffffffff16565b6101125461342990919063ffffffff16565b61011281905550613b85613b736003836137f990919063ffffffff16565b6101145461342990919063ffffffff16565b61011481905550613cb4565b60008060008090505b85811015613c0f57613be361010160009054906101000a900460ff1660ff16600a0a613bd561011c5461011b546137bb90919063ffffffff16565b6137f990919063ffffffff16565b9150613bf8828461342990919063ffffffff16565b92508161011c819055508080600101915050613b9a565b50613c26826101135461342990919063ffffffff16565b61011381905550613c68613c566002613c48858761323790919063ffffffff16565b6137f990919063ffffffff16565b6101125461342990919063ffffffff16565b61011281905550613caa613c986002613c8a858761323790919063ffffffff16565b6137f990919063ffffffff16565b6101145461342990919063ffffffff16565b6101148190555050505b50505050565b60003073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61010460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610115546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015613d8557600080fd5b505af1158015613d99573d6000803e3d6000fd5b505050506040513d6020811015613daf57600080fd5b81019080805190602001909291905050501515613e5a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f5472616e7366657220746f2064657646756e6441646472657373206661696c6581526020017f640000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000610115819055506001905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515613ea757600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600060019054906101000a900460ff1680613f1d5750613f1c61344a565b5b80613f3457506000809054906101000a900460ff16155b1515613fce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f436f6e747261637420696e7374616e63652068617320616c726561647920626581526020017f656e20696e697469616c697a656400000000000000000000000000000000000081525060400191505060405180910390fd5b60008060019054906101000a900460ff1690506001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff02191690831515021790555061401f82612b67565b151561402f5761402e82613823565b5b80600060016101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561408957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561418557600080fd5b61418f8282613e6a565b15151561419b57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561423557600080fd5b61423f8282613e6a565b151561424a57600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106142e957805160ff1916838001178555614317565b82800160010185558215614317579182015b828111156143165782518255916020019190600101906142fb565b5b5090506143249190614328565b5090565b61434a91905b8082111561434657600081600090555060010161432e565b5090565b9056fea165627a7a723058203478d898f62460e02d95cd6a7d1e0b5a030639d96bd069f02c708bd94e2d30890029",
  "deployedBytecode": "0x6080604052600436106102b4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146102b9578063095ea7b314610349578063119b22b3146103bc57806314d8bbf1146103e75780631727bcc7146104d157806318160ddd146104fc57806323b872dd1461052757806328fc33c7146105ba57806329a0f85b1461060d578063313ce567146106385780633180bfe11461066957806339509351146108d357806340c10f191461094657806343568eae146109b957806348cd4cb1146109e45780634cf9b9aa14610a0f5780634e33946114610a3a57806354fd4d5014610a9d5780635f04d72414610b2d578063672ff5d414610b5857806370a0823114610b83578063715018a614610be85780637581d1d114610bff5780637d556df014610c2a57806382bc07e614610c555780638a19c8bc14610c805780638a2381d714610cab5780638b649b9414610cd65780638da5cb5b14610d015780638f32d59b14610d5857806395d89b4114610d875780639701fa3414610e17578063983b2d5614610e665780639865027514610eb7578063a0ef67f214610ece578063a457c2d714610ef9578063a59efddd14610f6c578063a9059cbb14610f97578063a96f86681461100a578063aa271e1a14611039578063b480f6ad146110a2578063b7f92b71146110f9578063c4d66de814611124578063ca6da57e14611175578063d1cc5f93146111c8578063d7568324146111f3578063dd62ed3e1461121e578063de70289e146112a3578063dea95ff8146112ce578063e33b7de31461131d578063e5e90e2614611348578063e5f2e38314611373578063ed2a2d641461138a578063ee497bcb146113ef578063efe222661461143e578063f2fde38b14611469578063f73c1390146114ba578063fd6a93fb146114e5575b600080fd5b3480156102c557600080fd5b506102ce611510565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561030e5780820151818401526020810190506102f3565b50505050905090810190601f16801561033b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561035557600080fd5b506103a26004803603604081101561036c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115af565b604051808215151515815260200191505060405180910390f35b3480156103c857600080fd5b506103d16116dc565b6040518082815260200191505060405180910390f35b3480156103f357600080fd5b506104b76004803603604081101561040a57600080fd5b81019080803590602001909291908035906020019064010000000081111561043157600080fd5b82018360208201111561044357600080fd5b8035906020019184600183028401116401000000008311171561046557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506116e7565b604051808215151515815260200191505060405180910390f35b3480156104dd57600080fd5b506104e6611a84565b6040518082815260200191505060405180910390f35b34801561050857600080fd5b50610511611a8b565b6040518082815260200191505060405180910390f35b34801561053357600080fd5b506105a06004803603606081101561054a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611a95565b604051808215151515815260200191505060405180910390f35b3480156105c657600080fd5b506105f3600480360360208110156105dd57600080fd5b8101908080359060200190929190505050611c9d565b604051808215151515815260200191505060405180910390f35b34801561061957600080fd5b50610622611d96565b6040518082815260200191505060405180910390f35b34801561064457600080fd5b5061064d611d9d565b604051808260ff1660ff16815260200191505060405180910390f35b34801561067557600080fd5b506108d1600480360361018081101561068d57600080fd5b81019080803590602001906401000000008111156106aa57600080fd5b8201836020820111156106bc57600080fd5b803590602001918460018302840111640100000000831117156106de57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff1690602001909291908035906020019064010000000081111561074e57600080fd5b82018360208201111561076057600080fd5b8035906020019184600183028401116401000000008311171561078257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156107e557600080fd5b8201836020820111156107f757600080fd5b8035906020019184600183028401116401000000008311171561081957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190505050611db1565b005b3480156108df57600080fd5b5061092c600480360360408110156108f657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612013565b604051808215151515815260200191505060405180910390f35b34801561095257600080fd5b5061099f6004803603604081101561096957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061224a565b604051808215151515815260200191505060405180910390f35b3480156109c557600080fd5b506109ce612274565b6040518082815260200191505060405180910390f35b3480156109f057600080fd5b506109f961227b565b6040518082815260200191505060405180910390f35b348015610a1b57600080fd5b50610a24612282565b6040518082815260200191505060405180910390f35b348015610a4657600080fd5b50610a8760048036036060811015610a5d57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050612296565b6040518082815260200191505060405180910390f35b348015610aa957600080fd5b50610ab26123fa565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610af2578082015181840152602081019050610ad7565b50505050905090810190601f168015610b1f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610b3957600080fd5b50610b42612499565b6040518082815260200191505060405180910390f35b348015610b6457600080fd5b50610b6d6124a0565b6040518082815260200191505060405180910390f35b348015610b8f57600080fd5b50610bd260048036036020811015610ba657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124a7565b6040518082815260200191505060405180910390f35b348015610bf457600080fd5b50610bfd6124f0565b005b348015610c0b57600080fd5b50610c146125c4565b6040518082815260200191505060405180910390f35b348015610c3657600080fd5b50610c3f6125cb565b6040518082815260200191505060405180910390f35b348015610c6157600080fd5b50610c6a6125d2565b6040518082815260200191505060405180910390f35b348015610c8c57600080fd5b50610c956125d9565b6040518082815260200191505060405180910390f35b348015610cb757600080fd5b50610cc06125e0565b6040518082815260200191505060405180910390f35b348015610ce257600080fd5b50610ceb6125e7565b6040518082815260200191505060405180910390f35b348015610d0d57600080fd5b50610d166125ee565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610d6457600080fd5b50610d6d612618565b604051808215151515815260200191505060405180910390f35b348015610d9357600080fd5b50610d9c612670565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610ddc578082015181840152602081019050610dc1565b50505050905090810190601f168015610e095780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610e2357600080fd5b50610e5060048036036020811015610e3a57600080fd5b810190808035906020019092919050505061270f565b6040518082815260200191505060405180910390f35b348015610e7257600080fd5b50610eb560048036036020811015610e8957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612716565b005b348015610ec357600080fd5b50610ecc612736565b005b348015610eda57600080fd5b50610ee3612741565b6040518082815260200191505060405180910390f35b348015610f0557600080fd5b50610f5260048036036040811015610f1c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612748565b604051808215151515815260200191505060405180910390f35b348015610f7857600080fd5b50610f8161297f565b6040518082815260200191505060405180910390f35b348015610fa357600080fd5b50610ff060048036036040811015610fba57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612986565b604051808215151515815260200191505060405180910390f35b34801561101657600080fd5b5061101f61299d565b604051808215151515815260200191505060405180910390f35b34801561104557600080fd5b506110886004803603602081101561105c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b67565b604051808215151515815260200191505060405180910390f35b3480156110ae57600080fd5b506110b7612b84565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561110557600080fd5b5061110e612bab565b6040518082815260200191505060405180910390f35b34801561113057600080fd5b506111736004803603602081101561114757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612bb2565b005b34801561118157600080fd5b506111ae6004803603602081101561119857600080fd5b8101908080359060200190929190505050612cf1565b604051808215151515815260200191505060405180910390f35b3480156111d457600080fd5b506111dd612dea565b6040518082815260200191505060405180910390f35b3480156111ff57600080fd5b50611208612df1565b6040518082815260200191505060405180910390f35b34801561122a57600080fd5b5061128d6004803603604081101561124157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612df8565b6040518082815260200191505060405180910390f35b3480156112af57600080fd5b506112b8612e7f565b6040518082815260200191505060405180910390f35b3480156112da57600080fd5b50611307600480360360208110156112f157600080fd5b8101908080359060200190929190505050612e86565b6040518082815260200191505060405180910390f35b34801561132957600080fd5b50611332612e9b565b6040518082815260200191505060405180910390f35b34801561135457600080fd5b5061135d612ea2565b6040518082815260200191505060405180910390f35b34801561137f57600080fd5b50611388612ea9565b005b34801561139657600080fd5b506113d9600480360360208110156113ad57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613014565b6040518082815260200191505060405180910390f35b3480156113fb57600080fd5b5061143c6004803603606081101561141257600080fd5b8101908080359060200190929190803590602001909291908035906020019092919050505061305e565b005b34801561144a57600080fd5b5061145361311f565b6040518082815260200191505060405180910390f35b34801561147557600080fd5b506114b86004803603602081101561148c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613126565b005b3480156114c657600080fd5b506114cf613145565b6040518082815260200191505060405180910390f35b3480156114f157600080fd5b506114fa61314c565b6040518082815260200191505060405180910390f35b6101008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115a75780601f1061157c576101008083540402835291602001916115a7565b820191906000526020600020905b81548152906001019060200180831161158a57829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156115ec57600080fd5b81603460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600061010d54905090565b60008261011654101515156116fb57600080fd5b6000833361011860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051602001808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182815260200193505050506040516020818303038152906040528051906020012090508060405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c01828152602001915050604051602081830303815290604052805190602001209050600061180e8285613153565b90508073ffffffffffffffffffffffffffffffffffffffff1661182f6125ee565b73ffffffffffffffffffffffffffffffffffffffff161415156118ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f436c61696d206e6f7420617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b600161011860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555061191f856101165461323790919063ffffffff16565b610116819055503073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156119c957600080fd5b505af11580156119dd573d6000803e3d6000fd5b505050506040513d60208110156119f357600080fd5b81019080805190602001909291905050501515611a78576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f5472616e7366657220746f20636c61696d616e74206661696c6564000000000081525060200191505060405180910390fd5b60019250505092915050565b6101095481565b6000603554905090565b6000611b2682603460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461323790919063ffffffff16565b603460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611bb1848484613259565b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925603460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600190509392505050565b6000611ca7612618565b1515611cb257600080fd5b610112548211151515611d53576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f4e6f7420656e6f756768206375726174696f6e2072657761726473206176616981526020017f6c61626c6500000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b611d69826101125461323790919063ffffffff16565b61011281905550611d86826101165461342990919063ffffffff16565b6101168190555060019050919050565b6101055481565b61010160009054906101000a900460ff1681565b600060019054906101000a900460ff1680611dd05750611dcf61344a565b5b80611de757506000809054906101000a900460ff16155b1515611e81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f436f6e747261637420696e7374616e63652068617320616c726561647920626581526020017f656e20696e697469616c697a656400000000000000000000000000000000000081525060400191505060405180910390fd5b60008060019054906101000a900460ff1690506001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff021916908315150217905550611ed23361345b565b611edb33612bb2565b8c6101009080519060200190611ef29291906142a8565b508b61010160006101000a81548160ff021916908360ff1602179055508a6101029080519060200190611f269291906142a8565b50896101039080519060200190611f3e9291906142a8565b508861010460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087610105819055508661010781905550856101088190555084610109819055508361010a819055508261010b819055504361010e819055506101055461010681905550600061010f8190555061010554610110819055508161010c81905550611fe98261364f565b5080600060016101000a81548160ff02191690831515021790555050505050505050505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561205057600080fd5b6120df82603460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461342990919063ffffffff16565b603460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925603460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600061225533612b67565b151561226057600080fd5b61226a8383613665565b6001905092915050565b6101075481565b61010e5481565b600061010f546122906116dc565b03905090565b60006122a0612618565b15156122ab57600080fd5b61010d548410151561234b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001807f4c6173742072656c65617365206d757374206265206265666f7265206375727281526020017f656e7420726f756e64000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8361010f819055508261011081905550816101118190555061238a600f61237c6004856137bb90919063ffffffff16565b6137f990919063ffffffff16565b610112819055506123b8600f6123aa6004856137bb90919063ffffffff16565b6137f990919063ffffffff16565b610113819055506123e6600f6123d86004856137bb90919063ffffffff16565b6137f990919063ffffffff16565b6101148190555061010f5490509392505050565b6101038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124915780601f1061246657610100808354040283529160200191612491565b820191906000526020600020905b81548152906001019060200180831161247457829003601f168201915b505050505081565b61011a5481565b61010b5481565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6124f8612618565b151561250357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6101085481565b6101165481565b61010f5481565b61010d5481565b6101155481565b61010a5481565b6000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6101028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127075780601f106126dc57610100808354040283529160200191612707565b820191906000526020600020905b8154815290600101906020018083116126ea57829003601f168201915b505050505081565b6000919050565b61271f33612b67565b151561272a57600080fd5b61273381613823565b50565b61273f3361387d565b565b61011c5481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561278557600080fd5b61281482603460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461323790919063ffffffff16565b603460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925603460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6101065481565b6000612993338484613259565b6001905092915050565b60008060006129aa6116dc565b90508061010f54101515612a26576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4e6f206e6577207265776172647320617661696c61626c65000000000000000081525060200191505060405180910390fd5b6000612a3e61010f548361323790919063ffffffff16565b90506101095461010f54101515612a74576000610111549050612a6181836138d7565b9350612a6d308561224a565b5050612acc565b61010954821015612a8f57612a8881613973565b9250612acb565b6000612a99613a22565b90506000612aa684613a47565b9050612abb818361342990919063ffffffff16565b9450612ac7308261224a565b5050505b5b612ad7838284613a96565b612adf613cba565b508161010f81905550612afe836101115461342990919063ffffffff16565b610111819055507f39c15e2884a29a8ddf54563c3cb131c46f3667ecc29b194be9f5cf91b2879725836101125461011354610115546040518085815260200184815260200183815260200182815260200194505050505060405180910390a16001935050505090565b6000612b7d82609b613e6a90919063ffffffff16565b9050919050565b61010460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6101145481565b600060019054906101000a900460ff1680612bd15750612bd061344a565b5b80612be857506000809054906101000a900460ff16155b1515612c82576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f436f6e747261637420696e7374616e63652068617320616c726561647920626581526020017f656e20696e697469616c697a656400000000000000000000000000000000000081525060400191505060405180910390fd5b60008060019054906101000a900460ff1690506001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff021916908315150217905550612cd382613efe565b80600060016101000a81548160ff0219169083151502179055505050565b6000612cfb612618565b1515612d0657600080fd5b610113548211151515612da7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f4e6f7420656e6f7567682061697264726f70207265776172647320617661696c81526020017f61626c650000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b612dbd826101135461323790919063ffffffff16565b61011381905550612dda826101175461342990919063ffffffff16565b6101178190555060019050919050565b61011b5481565b6101105481565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61010c5481565b60008161010d8190555061010d549050919050565b6101115481565b6101195481565b6000612ed761010460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166124a7565b90503073ffffffffffffffffffffffffffffffffffffffff166323b872dd61010460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610123846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015612fd557600080fd5b505af1158015612fe9573d6000803e3d6000fd5b505050506040513d6020811015612fff57600080fd5b81019080805190602001909291905050505050565b600061011860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000610119541480156130745750600061011c54145b80156130835750600061011b54145b15156130f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f416c726561647920696e697469616c697a65640000000000000000000000000081525060200191505060405180910390fd5b61010554610119819055508261011a819055508161011b819055508061011c81905550505050565b6101125481565b61312e612618565b151561313957600080fd5b6131428161404d565b50565b6101175481565b6101135481565b600080600080604185511415156131705760009350505050613231565b6020850151925060408501519150606085015160001a9050601b8160ff16101561319b57601b810190505b601b8160ff16141580156131b35750601c8160ff1614155b156131c45760009350505050613231565b60018682858560405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015613221573d6000803e3d6000fd5b5050506020604051035193505050505b92915050565b600082821115151561324857600080fd5b600082840390508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561329557600080fd5b6132e781603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461323790919063ffffffff16565b603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061337c81603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461342990919063ffffffff16565b603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600080828401905083811015151561344057600080fd5b8091505092915050565b600080303b90506000811491505090565b600060019054906101000a900460ff168061347a575061347961344a565b5b8061349157506000809054906101000a900460ff16155b151561352b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f436f6e747261637420696e7374616e63652068617320616c726561647920626581526020017f656e20696e697469616c697a656400000000000000000000000000000000000081525060400191505060405180910390fd5b60008060019054906101000a900460ff1690506001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff02191690831515021790555081606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600060016101000a81548160ff0219169083151502179055505050565b600061365b308361224a565b5060019050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156136a157600080fd5b6136b68160355461342990919063ffffffff16565b60358190555061370e81603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461342990919063ffffffff16565b603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6000808314156137ce57600090506137f3565b600082840290508284828115156137e157fe5b041415156137ee57600080fd5b809150505b92915050565b6000808211151561380957600080fd5b6000828481151561381657fe5b0490508091505092915050565b61383781609b61414990919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b61389181609b6141f990919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b600080839050600080600090505b8481101561396757600061392d61010160009054906101000a900460ff1660ff16600a0a61391f86610108546137bb90919063ffffffff16565b6137f990919063ffffffff16565b9050613942818461342990919063ffffffff16565b9250613957818561342990919063ffffffff16565b93505080806001019150506138e5565b50809250505092915050565b600080600061010f541415613989576101055490505b620186a0831015613a1857600080600090505b84811015613a11576139e561010160009054906101000a900460ff1660ff16600a0a6139d76101105461010b546137bb90919063ffffffff16565b6137f990919063ffffffff16565b91506139fa828461342990919063ffffffff16565b92508161011081905550808060010191505061399c565b5050613a19565b5b80915050919050565b600080613a3e6101115461010c5461323790919063ffffffff16565b90508091505090565b60008061010c5490506000613a7b6001613a6d610109548761323790919063ffffffff16565b61342990919063ffffffff16565b90506000613a8983836138d7565b9050809350505050919050565b6000613abf6005613ab16004876137bb90919063ffffffff16565b6137f990919063ffffffff16565b9050613aea613ad86005866137f990919063ffffffff16565b6101155461342990919063ffffffff16565b6101158190555061011a54821015613b9157613b25613b136003836137f990919063ffffffff16565b6101135461342990919063ffffffff16565b61011381905550613b55613b436003836137f990919063ffffffff16565b6101125461342990919063ffffffff16565b61011281905550613b85613b736003836137f990919063ffffffff16565b6101145461342990919063ffffffff16565b61011481905550613cb4565b60008060008090505b85811015613c0f57613be361010160009054906101000a900460ff1660ff16600a0a613bd561011c5461011b546137bb90919063ffffffff16565b6137f990919063ffffffff16565b9150613bf8828461342990919063ffffffff16565b92508161011c819055508080600101915050613b9a565b50613c26826101135461342990919063ffffffff16565b61011381905550613c68613c566002613c48858761323790919063ffffffff16565b6137f990919063ffffffff16565b6101125461342990919063ffffffff16565b61011281905550613caa613c986002613c8a858761323790919063ffffffff16565b6137f990919063ffffffff16565b6101145461342990919063ffffffff16565b6101148190555050505b50505050565b60003073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61010460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610115546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015613d8557600080fd5b505af1158015613d99573d6000803e3d6000fd5b505050506040513d6020811015613daf57600080fd5b81019080805190602001909291905050501515613e5a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f5472616e7366657220746f2064657646756e6441646472657373206661696c6581526020017f640000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000610115819055506001905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515613ea757600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600060019054906101000a900460ff1680613f1d5750613f1c61344a565b5b80613f3457506000809054906101000a900460ff16155b1515613fce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f436f6e747261637420696e7374616e63652068617320616c726561647920626581526020017f656e20696e697469616c697a656400000000000000000000000000000000000081525060400191505060405180910390fd5b60008060019054906101000a900460ff1690506001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff02191690831515021790555061401f82612b67565b151561402f5761402e82613823565b5b80600060016101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561408957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561418557600080fd5b61418f8282613e6a565b15151561419b57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561423557600080fd5b61423f8282613e6a565b151561424a57600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106142e957805160ff1916838001178555614317565b82800160010185558215614317579182015b828111156143165782518255916020019190600101906142fb565b5b5090506143249190614328565b5090565b61434a91905b8082111561434657600081600090555060010161432e565b5090565b9056fea165627a7a723058203478d898f62460e02d95cd6a7d1e0b5a030639d96bd069f02c708bd94e2d30890029",
  "sourceMap": "57:1532:4:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;57:1532:4;;;;;;;",
  "deployedSourceMap": "57:1532:4:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;673:18:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;673:18:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;673:18:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2796:238:10;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2796:238:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2796:238:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;214:143:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;214:143:4;;;;;;;;;;;;;;;;;;;;;;;12678:688:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12678:688:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12678:688:3;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;12678:688:3;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;12678:688:3;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;12678:688:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;12678:688:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;935:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;935:26:3;;;;;;;;;;;;;;;;;;;;;;;997:89:10;;8:9:-1;5:2;;;30:1;27;20:12;5:2;997:89:10;;;;;;;;;;;;;;;;;;;;;;;3497:294;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3497:294:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3497:294:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11827:272:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11827:272:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11827:272:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;802:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;802:30:3;;;;;;;;;;;;;;;;;;;;;;;695:21;;8:9:-1;5:2;;;30:1;27;20:12;5:2;695:21:3;;;;;;;;;;;;;;;;;;;;;;;;;;;3417:989;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3417:989:3;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;3417:989:3;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;3417:989:3;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;3417:989:3;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;3417:989:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;3417:989:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;3417:989:3;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;3417:989:3;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;3417:989:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;3417:989:3;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;3417:989:3;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;3417:989:3;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;3417:989:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;3417:989:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4294:317:10;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4294:317:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4294:317:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;611:128:11;;8:9:-1;5:2;;;30:1;27;20:12;5:2;611:128:11;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;611:128:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;870:27:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;870:27:3;;;;;;;;;;;;;;;;;;;;;;;1136:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1136:25:3;;;;;;;;;;;;;;;;;;;;;;;13857:98;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13857:98:3;;;;;;;;;;;;;;;;;;;;;;;746:559:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;746:559:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;746:559:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;744:21:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;744:21:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;744:21:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14211:33;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14211:33:3;;;;;;;;;;;;;;;;;;;;;;;995:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;995:25:3;;;;;;;;;;;;;;;;;;;;;;;1295:104:10;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1295:104:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1295:104:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1438:137:9;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1438:137:9;;;;;;901:30:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;901:30:3;;;;;;;;;;;;;;;;;;;;;;;1968:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1968:31:3;;;;;;;;;;;;;;;;;;;;;;;1215:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1215:24:3;;;;;;;;;;;;;;;;;;;;;;;1055:27;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1055:27:3;;;;;;;;;;;;;;;;;;;;;;;1827:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1827:30:3;;;;;;;;;;;;;;;;;;;;;;;965:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;965:26:3;;;;;;;;;;;;;;;;;;;;;;;750:77:9;;8:9:-1;5:2;;;30:1;27;20:12;5:2;750:77:9;;;;;;;;;;;;;;;;;;;;;;;;;;;1070:90;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1070:90:9;;;;;;;;;;;;;;;;;;;;;;;;;;;720:20:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;720:20:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;720:20:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10990:457;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10990:457:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10990:457:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;646:90:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;646:90:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;646:90:6;;;;;;;;;;;;;;;;;;;;;;742:75;;8:9:-1;5:2;;;30:1;27;20:12;5:2;742:75:6;;;;;;14423:31:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14423:31:3;;;;;;;;;;;;;;;;;;;;;;;5119:327:10;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5119:327:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5119:327:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;836:30:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;836:30:3;;;;;;;;;;;;;;;;;;;;;;;2023:137:10;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2023:137:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2023:137:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4737:1758:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4737:1758:3;;;;;;;;;;;;;;;;;;;;;;;;;;;533:107:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;533:107:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;533:107:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;769:29:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;769:29:3;;;;;;;;;;;;;;;;;;;;;;;;;;;1725:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1725:26:3;;;;;;;;;;;;;;;;;;;;;;;263:101:11;;8:9:-1;5:2;;;30:1;27;20:12;5:2;263:101:11;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;263:101:11;;;;;;;;;;;;;;;;;;;;;;12199:277:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12199:277:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12199:277:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14305:32;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14305:32:3;;;;;;;;;;;;;;;;;;;;;;;1287:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1287:30:3;;;;;;;;;;;;;;;;;;;;;;;1730:129:10;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1730:129:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1730:129:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1024:27:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1024:27:3;;;;;;;;;;;;;;;;;;;;;;;492:125:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;492:125:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;492:125:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1411:28:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1411:28:3;;;;;;;;;;;;;;;;;;;;;;;13994:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13994:31:3;;;;;;;;;;;;;;;;;;;;;;;1432:155:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1432:155:4;;;;;;13471:98:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13471:98:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13471:98:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15087:590;;8:9:-1;5:2;;;30:1;27;20:12;5:2;15087:590:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;15087:590:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1504:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1504:25:3;;;;;;;;;;;;;;;;;;;;;;;1746:107:9;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1746:107:9;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1746:107:9;;;;;;;;;;;;;;;;;;;;;;2090:32:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2090:32:3;;;;;;;;;;;;;;;;;;;;;;;1613:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1613:26:3;;;;;;;;;;;;;;;;;;;;;;;673:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2796:238:10:-;2861:4;2904:1;2885:21;;:7;:21;;;;2877:30;;;;;;;;2950:5;2918:8;:20;2927:10;2918:20;;;;;;;;;;;;;;;:29;2939:7;2918:29;;;;;;;;;;;;;;;:37;;;;2991:7;2970:36;;2979:10;2970:36;;;3000:5;2970:36;;;;;;;;;;;;;;;;;;3023:4;3016:11;;2796:238;;;;:::o;214:143:4:-;255:7;340:12;;333:19;;214:143;:::o;12678:688:3:-;12750:4;12834:7;12814:16;;:27;;12806:36;;;;;;;;12848:12;12890:7;12899:10;12911:6;:18;12918:10;12911:18;;;;;;;;;;;;;;;;12873:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;12873:57:3;;;12863:68;;;;;;12848:83;;13007:4;12954:58;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;12954:58:3;;;12944:69;;;;;;12937:76;;13079:16;13098:25;13112:4;13118;13098:13;:25::i;:::-;13079:44;;13148:8;13137:19;;:7;:5;:7::i;:::-;:19;;;13129:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13209:1;13187:6;:18;13194:10;13187:18;;;;;;;;;;;;;;;;:23;;;;;;;;;;;13235:29;13256:7;13235:16;;:20;;:29;;;;:::i;:::-;13216:16;:48;;;;13278:4;:13;;;13292:10;13304:7;13278:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13278:34:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13278:34:3;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13278:34:3;;;;;;;;;;;;;;;;13270:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13357:4;13350:11;;;;12678:688;;;;:::o;935:26::-;;;;:::o;997:89:10:-;1041:7;1067:12;;1060:19;;997:89;:::o;3497:294::-;3576:4;3621:37;3652:5;3621:8;:14;3630:4;3621:14;;;;;;;;;;;;;;;:26;3636:10;3621:26;;;;;;;;;;;;;;;;:30;;:37;;;;:::i;:::-;3592:8;:14;3601:4;3592:14;;;;;;;;;;;;;;;:26;3607:10;3592:26;;;;;;;;;;;;;;;:66;;;;3668:26;3678:4;3684:2;3688:5;3668:9;:26::i;:::-;3724:10;3709:54;;3718:4;3709:54;;;3736:8;:14;3745:4;3736:14;;;;;;;;;;;;;;;:26;3751:10;3736:26;;;;;;;;;;;;;;;;3709:54;;;;;;;;;;;;;;;;;;3780:4;3773:11;;3497:294;;;;;:::o;11827:272:3:-;11895:4;954:9:9;:7;:9::i;:::-;946:18;;;;;;;;11927:10:3;;11915:8;:22;;11907:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11998:24;12013:8;11998:10;;:14;;:24;;;;:::i;:::-;11985:10;:37;;;;12047:30;12068:8;12047:16;;:20;;:30;;;;:::i;:::-;12028:16;:49;;;;12090:4;12083:11;;11827:272;;;:::o;802:30::-;;;;:::o;695:21::-;;;;;;;;;;;;;:::o;3417:989::-;1024:12:13;;;;;;;;;;;:31;;;;1040:15;:13;:15::i;:::-;1024:31;:47;;;;1060:11;;;;;;;;;;;1059:12;1024:47;1016:106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:20;1152:12;;;;;;;;;;;1129:35;;1185:4;1170:12;;:19;;;;;;;;;;;;;;;;;;1209:4;1195:11;;:18;;;;;;;;;;;;;;;;;;3795:30:3;3814:10;3795:18;:30::i;:::-;3831:36;3856:10;3831:24;:36::i;:::-;3881:5;3874:4;:12;;;;;;;;;;;;:::i;:::-;;3903:9;3892:8;;:20;;;;;;;;;;;;;;;;;;3927:7;3918:6;:16;;;;;;;;;;;;:::i;:::-;;3950:8;3940:7;:18;;;;;;;;;;;;:::i;:::-;;3981:15;3964:14;;:32;;;;;;;;;;;;;;;;;;4020:16;4002:15;:34;;;;4057:13;4042:12;:28;;;;4094:16;4076:15;:34;;;;4130:12;4116:11;:26;;;;4162:12;4148:11;:26;;;;4193:11;4180:10;:24;;;;4224:12;4211:10;:25;;;;4260:15;;4242;:33;;;;4293:1;4281:9;:13;;;;4318:15;;4300;:33;;;;4354:13;4339:12;:28;;;;4373;4387:13;4373;:28::i;:::-;;1243:15:13;1228:12;;:30;;;;;;;;;;;;;;;;;;3417:989:3;;;;;;;;;;;;;:::o;4294:317:10:-;4374:4;4417:1;4398:21;;:7;:21;;;;4390:30;;;;;;;;4463:45;4497:10;4463:8;:20;4472:10;4463:20;;;;;;;;;;;;;;;:29;4484:7;4463:29;;;;;;;;;;;;;;;;:33;;:45;;;;:::i;:::-;4431:8;:20;4440:10;4431:20;;;;;;;;;;;;;;;:29;4452:7;4431:29;;;;;;;;;;;;;;;:77;;;;4544:7;4523:60;;4532:10;4523:60;;;4553:8;:20;4562:10;4553:20;;;;;;;;;;;;;;;:29;4574:7;4553:29;;;;;;;;;;;;;;;;4523:60;;;;;;;;;;;;;;;;;;4600:4;4593:11;;4294:317;;;;:::o;611:128:11:-;679:4;488:20:6;497:10;488:8;:20::i;:::-;480:29;;;;;;;;695:16:11;701:2;705:5;695;:16::i;:::-;728:4;721:11;;611:128;;;;:::o;870:27:3:-;;;;:::o;1136:25::-;;;;:::o;13857:98::-;13906:7;13941:9;;13928:10;:8;:10::i;:::-;:22;13921:29;;13857:98;:::o;746:559:4:-;863:7;954:9:9;:7;:9::i;:::-;946:18;;;;;;;;898:12:4;;886:9;:24;878:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;974:9;962;:21;;;;1007:16;989:15;:34;;;;1045:14;1029:13;:30;;;;1078:32;1104:5;1078:21;1097:1;1078:14;:18;;:21;;;;:::i;:::-;:25;;:32;;;;:::i;:::-;1065:10;:45;;;;1130:32;1156:5;1130:21;1149:1;1130:14;:18;;:21;;;;:::i;:::-;:25;;:32;;;;:::i;:::-;1116:11;:46;;;;1182:32;1208:5;1182:21;1201:1;1182:14;:18;;:21;;;;:::i;:::-;:25;;:32;;;;:::i;:::-;1168:11;:46;;;;1291:9;;1284:16;;746:559;;;;;:::o;744:21:3:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14211:33::-;;;;:::o;995:25::-;;;;:::o;1295:104:10:-;1350:7;1376:9;:16;1386:5;1376:16;;;;;;;;;;;;;;;;1369:23;;1295:104;;;:::o;1438:137:9:-;954:9;:7;:9::i;:::-;946:18;;;;;;;;1536:1;1499:40;;1520:6;;;;;;;;;;;1499:40;;;;;;;;;;;;1566:1;1549:6;;:19;;;;;;;;;;;;;;;;;;1438:137::o;901:30:3:-;;;;:::o;1968:31::-;;;;:::o;1215:24::-;;;;:::o;1055:27::-;;;;:::o;1827:30::-;;;;:::o;965:26::-;;;;:::o;750:77:9:-;788:7;814:6;;;;;;;;;;;807:13;;750:77;:::o;1070:90::-;1110:4;1147:6;;;;;;;;;;;1133:20;;:10;:20;;;1126:27;;1070:90;:::o;720:20:3:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;10990:457::-;11047:7;10990:457;;;:::o;646:90:6:-;488:20;497:10;488:8;:20::i;:::-;480:29;;;;;;;;710:19;721:7;710:10;:19::i;:::-;646:90;:::o;742:75::-;785:25;799:10;785:13;:25::i;:::-;742:75::o;14423:31:3:-;;;;:::o;5119:327:10:-;5204:4;5247:1;5228:21;;:7;:21;;;;5220:30;;;;;;;;5293:50;5327:15;5293:8;:20;5302:10;5293:20;;;;;;;;;;;;;;;:29;5314:7;5293:29;;;;;;;;;;;;;;;;:33;;:50;;;;:::i;:::-;5261:8;:20;5270:10;5261:20;;;;;;;;;;;;;;;:29;5282:7;5261:29;;;;;;;;;;;;;;;:82;;;;5379:7;5358:60;;5367:10;5358:60;;;5388:8;:20;5397:10;5388:20;;;;;;;;;;;;;;;:29;5409:7;5388:29;;;;;;;;;;;;;;;;5358:60;;;;;;;;;;;;;;;;;;5435:4;5428:11;;5119:327;;;;:::o;836:30:3:-;;;;:::o;2023:137:10:-;2084:4;2100:32;2110:10;2122:2;2126:5;2100:9;:32::i;:::-;2149:4;2142:11;;2023:137;;;;:::o;4737:1758:3:-;4778:4;4790:24;4820:20;4843:10;:8;:10::i;:::-;4820:33;;4879:12;4867:9;;:24;4859:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4975:20;4998:27;5015:9;;4998:12;:16;;:27;;;;:::i;:::-;4975:50;;5049:11;;5036:9;;:24;;5032:1026;;;5174:24;5201:13;;5174:40;;5241:57;5267:16;5285:12;5241:25;:57::i;:::-;5222:76;;5306:37;5319:4;5326:16;5306:4;:37::i;:::-;;5032:1026;;;;5450:11;;5435:12;:26;5431:621;;;5598:36;5621:12;5598:22;:36::i;:::-;5579:55;;5431:621;;;5784:27;5814;:25;:27::i;:::-;5784:57;;5851:27;5881:39;5907:12;5881:25;:39::i;:::-;5851:69;;5949:44;5973:19;5949;:23;;:44;;;;:::i;:::-;5930:63;;6003:40;6016:4;6023:19;6003:4;:40::i;:::-;;5431:621;;;5032:1026;6064:58;6077:16;6095:12;6109;6064;:58::i;:::-;6191:11;:9;:11::i;:::-;;6256:12;6244:9;:24;;;;6327:35;6345:16;6327:13;;:17;;:35;;;;:::i;:::-;6311:13;:51;;;;6405:68;6414:16;6432:10;;6444:11;;6457:15;;6405:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6486:4;6479:11;;;;;4737:1758;:::o;533:107:6:-;589:4;612:21;625:7;612:8;:12;;:21;;;;:::i;:::-;605:28;;533:107;;;:::o;769:29:3:-;;;;;;;;;;;;;:::o;1725:26::-;;;;:::o;263:101:11:-;1024:12:13;;;;;;;;;;;:31;;;;1040:15;:13;:15::i;:::-;1024:31;:47;;;;1060:11;;;;;;;;;;;1059:12;1024:47;1016:106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:20;1152:12;;;;;;;;;;;1129:35;;1185:4;1170:12;;:19;;;;;;;;;;;;;;;;;;1209:4;1195:11;;:18;;;;;;;;;;;;;;;;;;328:29:11;350:6;328:21;:29::i;:::-;1243:15:13;1228:12;;:30;;;;;;;;;;;;;;;;;;263:101:11;;:::o;12199:277:3:-;12268:4;954:9:9;:7;:9::i;:::-;946:18;;;;;;;;12300:11:3;;12288:8;:23;;12280:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12372:25;12388:8;12372:11;;:15;;:25;;;;:::i;:::-;12358:11;:39;;;;12423:31;12445:8;12423:17;;:21;;:31;;;;:::i;:::-;12403:17;:51;;;;12467:4;12460:11;;12199:277;;;:::o;14305:32::-;;;;:::o;1287:30::-;;;;:::o;1730:129:10:-;1802:7;1828:8;:15;1837:5;1828:15;;;;;;;;;;;;;;;:24;1844:7;1828:24;;;;;;;;;;;;;;;;1821:31;;1730:129;;;;:::o;1024:27:3:-;;;;:::o;492:125:4:-;548:7;578:9;563:12;:24;;;;600:12;;593:19;;492:125;;;:::o;1411:28:3:-;;;;:::o;13994:31::-;;;;:::o;1432:155:4:-;1472:15;1490:25;1500:14;;;;;;;;;;;1490:9;:25::i;:::-;1472:43;;1521:4;:17;;;1539:14;;;;;;;;;;;1563:5;1571:10;1521:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1521:61:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1521:61:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1521:61:4;;;;;;;;;;;;;;;;;1432:155;:::o;13471:98:3:-;13526:7;13548:6;:16;13555:8;13548:16;;;;;;;;;;;;;;;;13541:23;;13471:98;;;:::o;15087:590::-;15242:1;15222:16;;:21;:46;;;;;15267:1;15247:16;;:21;15222:46;:72;;;;;15293:1;15272:17;;:22;15222:72;15214:104;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15343:15;;15324:16;:34;;;;15468:19;15447:18;:40;;;;15513:18;15493:17;:38;;;;15556:16;15537;:35;;;;15087:590;;;:::o;1504:25::-;;;;:::o;1746:107:9:-;954:9;:7;:9::i;:::-;946:18;;;;;;;;1818:28;1837:8;1818:18;:28::i;:::-;1746:107;:::o;2090:32:3:-;;;;:::o;1613:26::-;;;;:::o;609:1026:7:-;687:7;706:9;725;744:7;824:2;804:9;:16;:22;;800:72;;;858:1;842:19;;;;;;;800:72;1166:4;1155:9;1151:20;1145:27;1140:32;;1211:4;1200:9;1196:20;1190:27;1185:32;;1264:4;1253:9;1249:20;1243:27;1240:1;1235:36;1230:41;;1390:2;1386:1;:6;;;1382:44;;;1413:2;1408:7;;;;1382:44;1508:2;1503:1;:7;;;;:18;;;;;1519:2;1514:1;:7;;;;1503:18;1499:130;;;1553:1;1537:19;;;;;;;1499:130;1594:24;1604:4;1610:1;1613;1616;1594:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1594:24:7;;;;;;;;1587:31;;;;;609:1026;;;;;:::o;1205:145:8:-;1263:7;1295:1;1290;:6;;1282:15;;;;;;;;1307:9;1323:1;1319;:5;1307:17;;1342:1;1335:8;;;1205:145;;;;:::o;5660:256:10:-;5761:1;5747:16;;:2;:16;;;;5739:25;;;;;;;;5793:26;5813:5;5793:9;:15;5803:4;5793:15;;;;;;;;;;;;;;;;:19;;:26;;;;:::i;:::-;5775:9;:15;5785:4;5775:15;;;;;;;;;;;;;;;:44;;;;5845:24;5863:5;5845:9;:13;5855:2;5845:13;;;;;;;;;;;;;;;;:17;;:24;;;;:::i;:::-;5829:9;:13;5839:2;5829:13;;;;;;;;;;;;;;;:40;;;;5899:2;5884:25;;5893:4;5884:25;;;5903:5;5884:25;;;;;;;;;;;;;;;;;;5660:256;;;:::o;1431:145:8:-;1489:7;1508:9;1524:1;1520;:5;1508:17;;1548:1;1543;:6;;1535:15;;;;;;;;1568:1;1561:8;;;1431:145;;;;:::o;1349:467:13:-;1396:4;1737:10;1782:7;1770:20;1764:26;;1810:1;1804:2;:7;1797:14;;;1349:467;:::o;545:142:9:-;1024:12:13;;;;;;;;;;;:31;;;;1040:15;:13;:15::i;:::-;1024:31;:47;;;;1060:11;;;;;;;;;;;1059:12;1024:47;1016:106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:20;1152:12;;;;;;;;;;;1129:35;;1185:4;1170:12;;:19;;;;;;;;;;;;;;;;;;1209:4;1195:11;;:18;;;;;;;;;;;;;;;;;;619:6:9;610;;:15;;;;;;;;;;;;;;;;;;673:6;;;;;;;;;;;640:40;;669:1;640:40;;;;;;;;;;;;1243:15:13;1228:12;;:30;;;;;;;;;;;;;;;;;;545:142:9;;:::o;4520:128:3:-;4582:4;4594:32;4607:4;4614:11;4594:4;:32::i;:::-;;4639:4;4632:11;;4520:128;;;:::o;6259:263:10:-;6352:1;6333:21;;:7;:21;;;;6325:30;;;;;;;;6381:23;6398:5;6381:12;;:16;;:23;;;;:::i;:::-;6366:12;:38;;;;6435:29;6458:5;6435:9;:18;6445:7;6435:18;;;;;;;;;;;;;;;;:22;;:29;;;;:::i;:::-;6414:9;:18;6424:7;6414:18;;;;;;;;;;;;;;;:50;;;;6500:7;6479:36;;6496:1;6479:36;;;6509:5;6479:36;;;;;;;;;;;;;;;;;;6259:263;;:::o;229:421:8:-;287:7;532:1;527;:6;523:45;;;556:1;549:8;;;;523:45;578:9;594:1;590;:5;578:17;;622:1;617;613;:5;;;;;;;;:10;605:19;;;;;;;;642:1;635:8;;;229:421;;;;;:::o;778:296::-;836:7;933:1;929;:5;921:14;;;;;;;;945:9;961:1;957;:5;;;;;;;;945:17;;1066:1;1059:8;;;778:296;;;;:::o;823:119:6:-;879:21;892:7;879:8;:12;;:21;;;;:::i;:::-;927:7;915:20;;;;;;;;;;;;823:119;:::o;948:127::-;1007:24;1023:7;1007:8;:15;;:24;;;;:::i;:::-;1060:7;1046:22;;;;;;;;;;;;948:127;:::o;6771:486:3:-;6874:7;6889:19;6911:12;6889:34;;6929:24;6964:6;6973:1;6964:10;;6959:265;6980:13;6976:1;:17;6959:265;;;7008:25;7036:59;7085:8;;;;;;;;;;;7077:17;;7073:2;:21;7036:32;7056:11;7036:15;;:19;;:32;;;;:::i;:::-;:36;;:59;;;;:::i;:::-;7008:87;;7122:39;7143:17;7122:16;:20;;:39;;;;:::i;:::-;7103:58;;7183:34;7199:17;7183:11;:15;;:34;;;;:::i;:::-;7169:48;;6959:265;6995:3;;;;;;;6959:265;;;;7236:16;7229:23;;;;6771:486;;;;:::o;7399:1193::-;7472:7;7487:24;7642:1;7629:9;;:14;7625:69;;;7672:15;;7653:34;;7625:69;7719:6;7703:13;:22;7699:860;;;7982:19;8014:6;8023:1;8014:10;;8009:233;8030:13;8026:1;:17;8009:233;;;8074:58;8122:8;;;;;;;;;;;8114:17;;8110:2;:21;8074:31;8089:15;;8074:10;;:14;;:31;;;;:::i;:::-;:35;;:58;;;;:::i;:::-;8060:72;;8161:33;8182:11;8161:16;:20;;:33;;;;:::i;:::-;8142:52;;8222:11;8204:15;:29;;;;8045:3;;;;;;;8009:233;;;;7699:860;;;;;8571:16;8564:23;;;7399:1193;;;:::o;8725:183::-;8785:7;8800:32;8835:31;8852:13;;8835:12;;:16;;:31;;;;:::i;:::-;8800:66;;8879:24;8872:31;;;8725:183;:::o;9112:404::-;9193:7;9208:29;9240:12;;9208:44;;9258:33;9294:37;9329:1;9294:30;9312:11;;9294:13;:17;;:30;;;;:::i;:::-;:34;;:37;;;;:::i;:::-;9258:73;;9392:18;9413:75;9439:21;9462:25;9413;:75::i;:::-;9392:96;;9501:10;9494:17;;;;;9112:404;;;:::o;9712:1107::-;9822:19;9844:31;9873:1;9844:24;9866:1;9844:17;:21;;:24;;;;:::i;:::-;:28;;:31;;;;:::i;:::-;9822:53;;9937:45;9957:24;9979:1;9957:17;:21;;:24;;;;:::i;:::-;9937:15;;:19;;:45;;;;:::i;:::-;9919:15;:63;;;;10044:18;;10028:13;:34;10024:791;;;10086:35;10102:18;10118:1;10102:11;:15;;:18;;;;:::i;:::-;10086:11;;:15;;:35;;;;:::i;:::-;10072:11;:49;;;;10142:34;10157:18;10173:1;10157:11;:15;;:18;;;;:::i;:::-;10142:10;;:14;;:34;;;;:::i;:::-;10129:10;:47;;;;10198:35;10214:18;10230:1;10214:11;:15;;:18;;;;:::i;:::-;10198:11;;:15;;:35;;;;:::i;:::-;10184:11;:49;;;;10024:791;;;10254:16;10278:20;10311:6;10320:1;10311:10;;10306:229;10327:13;10323:1;:17;10306:229;;;10372:66;10428:8;;;;;;;;;;;10420:17;;10416:2;:21;10372:39;10394:16;;10372:17;;:21;;:39;;;;:::i;:::-;:43;;:66;;;;:::i;:::-;10357:81;;10459:26;10472:12;10459:8;:12;;:26;;;;:::i;:::-;10448:37;;10514:12;10495:16;:31;;;;10342:3;;;;;;;10306:229;;;;10556:25;10572:8;10556:11;;:15;;:25;;;;:::i;:::-;10542:11;:39;;;;10685:50;10700:34;10732:1;10701:25;10717:8;10701:11;:15;;:25;;;;:::i;:::-;10700:31;;:34;;;;:::i;:::-;10685:10;;:14;;:50;;;;:::i;:::-;10672:10;:63;;;;10757:51;10773:34;10805:1;10774:25;10790:8;10774:11;:15;;:25;;;;:::i;:::-;10773:31;;:34;;;;:::i;:::-;10757:11;;:15;;:51;;;;:::i;:::-;10743:11;:65;;;;10024:791;;;9712:1107;;;;:::o;11536:189::-;11574:4;11594;:13;;;11608:14;;;;;;;;;;;11624:15;;11594:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11594:46:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11594:46:3;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11594:46:3;;;;;;;;;;;;;;;;11586:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11702:1;11684:15;:19;;;;11716:4;11709:11;;11536:189;:::o;786:162:5:-;858:4;901:1;882:21;;:7;:21;;;;874:30;;;;;;;;921:4;:11;;:20;933:7;921:20;;;;;;;;;;;;;;;;;;;;;;;;;914:27;;786:162;;;;:::o;305:137:6:-;1024:12:13;;;;;;;;;;;:31;;;;1040:15;:13;:15::i;:::-;1024:31;:47;;;;1060:11;;;;;;;;;;;1059:12;1024:47;1016:106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:20;1152:12;;;;;;;;;;;1129:35;;1185:4;1170:12;;:19;;;;;;;;;;;;;;;;;;1209:4;1195:11;;:18;;;;;;;;;;;;;;;;;;375:16:6;384:6;375:8;:16::i;:::-;374:17;370:66;;;407:18;418:6;407:10;:18::i;:::-;370:66;1243:15:13;1228:12;;:30;;;;;;;;;;;;;;;;;;305:137:6;;:::o;1997:183:9:-;2090:1;2070:22;;:8;:22;;;;2062:31;;;;;;;;2137:8;2108:38;;2129:6;;;;;;;;;;;2108:38;;;;;;;;;;;;2165:8;2156:6;;:17;;;;;;;;;;;;;;;;;;1997:183;:::o;259:181:5:-;354:1;335:21;;:7;:21;;;;327:30;;;;;;;;376:18;380:4;386:7;376:3;:18::i;:::-;375:19;367:28;;;;;;;;429:4;406;:11;;:20;418:7;406:20;;;;;;;;;;;;;;;;:27;;;;;;;;;;;;;;;;;;259:181;;:::o;514:184::-;612:1;593:21;;:7;:21;;;;585:30;;;;;;;;633:18;637:4;643:7;633:3;:18::i;:::-;625:27;;;;;;;;686:5;663:4;:11;;:20;675:7;663:20;;;;;;;;;;;;;;;;:28;;;;;;;;;;;;;;;;;;514:184;;:::o;57:1532:4:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "pragma solidity ^0.5.0;\n\nimport \"../RelevantToken.sol\";\n\ncontract RelevantTokenMock is RelevantToken{\n  /**\n   * @dev Return current round number // using the state variable set by setRoundNum, for testing\n   */\n  function roundNum() public view returns (uint256) {\n    // return (block.number.sub(startBlock)).div(roundLength);\n    return currentRound;\n  }\n\n  /**\n   * @dev Artificially increases current round number // auxiliary function for testing (simulating block progression)\n   */\n  function setRoundNum(uint256 _roundNum) public returns (uint256) {\n    currentRound = _roundNum;\n    return currentRound;\n  }\n\n  /**\n   * @dev Artificially sets the last release round // auxiliary function for testing (simulating reward release)\n   */\n  function setLastRound(uint256 _roundNum, uint256 _lastRoundReward, uint256 _totalReleased) public onlyOwner returns (uint256) {\n    require(_roundNum < currentRound, \"Last release must be before current round\");\n    lastRound = _roundNum;\n    lastRoundReward = _lastRoundReward;\n    totalReleased = _totalReleased;\n    rewardFund = _totalReleased.mul(4).div(5 * 3);\n    airdropFund = _totalReleased.mul(4).div(5 * 3);\n    reserveFund = _totalReleased.mul(4).div(5 * 3);\n    // devFund is always 0 since it gets transferred right away\n    return lastRound;\n  }\n\n  /**\n   * @dev Artificially empties the devFund account of all accumulated tokens // auxiliary function for testing\n   */\n  function emptyDevBalance() public {\n    uint devBalance = balanceOf(devFundAddress);\n    this.transferFrom(devFundAddress, address(0x123), devBalance);\n  }\n}\n",
  "sourcePath": "/Users/acrudol/Documents/Code/Relevant/token/contracts/mocks/RelevantTokenMock.sol",
  "ast": {
    "absolutePath": "/Users/acrudol/Documents/Code/Relevant/token/contracts/mocks/RelevantTokenMock.sol",
    "exportedSymbols": {
      "RelevantTokenMock": [
        2572
      ]
    },
    "id": 2573,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2455,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:4"
      },
      {
        "absolutePath": "/Users/acrudol/Documents/Code/Relevant/token/contracts/RelevantToken.sol",
        "file": "../RelevantToken.sol",
        "id": 2456,
        "nodeType": "ImportDirective",
        "scope": 2573,
        "sourceUnit": 2454,
        "src": "25:30:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 2457,
              "name": "RelevantToken",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2453,
              "src": "87:13:4",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_RelevantToken_$2453",
                "typeString": "contract RelevantToken"
              }
            },
            "id": 2458,
            "nodeType": "InheritanceSpecifier",
            "src": "87:13:4"
          }
        ],
        "contractDependencies": [
          2453,
          2785,
          3113,
          3552,
          3601,
          3670,
          3726
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 2572,
        "linearizedBaseContracts": [
          2572,
          2453,
          3601,
          2785,
          3113,
          3552,
          3670,
          3726
        ],
        "name": "RelevantTokenMock",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 2465,
              "nodeType": "Block",
              "src": "264:93:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2463,
                    "name": "currentRound",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1597,
                    "src": "340:12:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 2462,
                  "id": 2464,
                  "nodeType": "Return",
                  "src": "333:19:4"
                }
              ]
            },
            "documentation": "@dev Return current round number // using the state variable set by setRoundNum, for testing",
            "id": 2466,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "roundNum",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2459,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "231:2:4"
            },
            "returnParameters": {
              "id": 2462,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2461,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 2466,
                  "src": "255:7:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2460,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "255:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "254:9:4"
            },
            "scope": 2572,
            "src": "214:143:4",
            "stateMutability": "view",
            "superFunction": 2392,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2479,
              "nodeType": "Block",
              "src": "557:60:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2475,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 2473,
                      "name": "currentRound",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1597,
                      "src": "563:12:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 2474,
                      "name": "_roundNum",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2468,
                      "src": "578:9:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "563:24:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2476,
                  "nodeType": "ExpressionStatement",
                  "src": "563:24:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2477,
                    "name": "currentRound",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1597,
                    "src": "600:12:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 2472,
                  "id": 2478,
                  "nodeType": "Return",
                  "src": "593:19:4"
                }
              ]
            },
            "documentation": "@dev Artificially increases current round number // auxiliary function for testing (simulating block progression)",
            "id": 2480,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setRoundNum",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2469,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2468,
                  "name": "_roundNum",
                  "nodeType": "VariableDeclaration",
                  "scope": 2480,
                  "src": "513:17:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2467,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "513:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "512:19:4"
            },
            "returnParameters": {
              "id": 2472,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2471,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 2480,
                  "src": "548:7:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2470,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "548:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "547:9:4"
            },
            "scope": 2572,
            "src": "492:125:4",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2550,
              "nodeType": "Block",
              "src": "872:433:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2496,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 2494,
                          "name": "_roundNum",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2482,
                          "src": "886:9:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 2495,
                          "name": "currentRound",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1597,
                          "src": "898:12:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "886:24:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4c6173742072656c65617365206d757374206265206265666f72652063757272656e7420726f756e64",
                        "id": 2497,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "912:43:4",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_0471d70cf2a035f7f7b048b3897a5462a01824880c0baa08bf457fc278eb36bb",
                          "typeString": "literal_string \"Last release must be before current round\""
                        },
                        "value": "Last release must be before current round"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_0471d70cf2a035f7f7b048b3897a5462a01824880c0baa08bf457fc278eb36bb",
                          "typeString": "literal_string \"Last release must be before current round\""
                        }
                      ],
                      "id": 2493,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        3744,
                        3745
                      ],
                      "referencedDeclaration": 3745,
                      "src": "878:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2498,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "878:78:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2499,
                  "nodeType": "ExpressionStatement",
                  "src": "878:78:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2502,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 2500,
                      "name": "lastRound",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1601,
                      "src": "962:9:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 2501,
                      "name": "_roundNum",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2482,
                      "src": "974:9:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "962:21:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2503,
                  "nodeType": "ExpressionStatement",
                  "src": "962:21:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2506,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 2504,
                      "name": "lastRoundReward",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1603,
                      "src": "989:15:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 2505,
                      "name": "_lastRoundReward",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2484,
                      "src": "1007:16:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "989:34:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2507,
                  "nodeType": "ExpressionStatement",
                  "src": "989:34:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2510,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 2508,
                      "name": "totalReleased",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1605,
                      "src": "1029:13:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 2509,
                      "name": "_totalReleased",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2486,
                      "src": "1045:14:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1029:30:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2511,
                  "nodeType": "ExpressionStatement",
                  "src": "1029:30:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2522,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 2512,
                      "name": "rewardFund",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1607,
                      "src": "1065:10:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_rational_15_by_1",
                            "typeString": "int_const 15"
                          },
                          "id": 2520,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "hexValue": "35",
                            "id": 2518,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1104:1:4",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_5_by_1",
                              "typeString": "int_const 5"
                            },
                            "value": "5"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "33",
                            "id": 2519,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1108:1:4",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_3_by_1",
                              "typeString": "int_const 3"
                            },
                            "value": "3"
                          },
                          "src": "1104:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_15_by_1",
                            "typeString": "int_const 15"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_15_by_1",
                            "typeString": "int_const 15"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "34",
                              "id": 2515,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1097:1:4",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_4_by_1",
                                "typeString": "int_const 4"
                              },
                              "value": "4"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_4_by_1",
                                "typeString": "int_const 4"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 2513,
                              "name": "_totalReleased",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2486,
                              "src": "1078:14:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 2514,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "mul",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2901,
                            "src": "1078:18:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 2516,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1078:21:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2517,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "div",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2925,
                        "src": "1078:25:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 2521,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1078:32:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1065:45:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2523,
                  "nodeType": "ExpressionStatement",
                  "src": "1065:45:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2534,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 2524,
                      "name": "airdropFund",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1609,
                      "src": "1116:11:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_rational_15_by_1",
                            "typeString": "int_const 15"
                          },
                          "id": 2532,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "hexValue": "35",
                            "id": 2530,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1156:1:4",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_5_by_1",
                              "typeString": "int_const 5"
                            },
                            "value": "5"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "33",
                            "id": 2531,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1160:1:4",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_3_by_1",
                              "typeString": "int_const 3"
                            },
                            "value": "3"
                          },
                          "src": "1156:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_15_by_1",
                            "typeString": "int_const 15"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_15_by_1",
                            "typeString": "int_const 15"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "34",
                              "id": 2527,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1149:1:4",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_4_by_1",
                                "typeString": "int_const 4"
                              },
                              "value": "4"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_4_by_1",
                                "typeString": "int_const 4"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 2525,
                              "name": "_totalReleased",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2486,
                              "src": "1130:14:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 2526,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "mul",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2901,
                            "src": "1130:18:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 2528,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1130:21:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2529,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "div",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2925,
                        "src": "1130:25:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 2533,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1130:32:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1116:46:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2535,
                  "nodeType": "ExpressionStatement",
                  "src": "1116:46:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2546,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 2536,
                      "name": "reserveFund",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1611,
                      "src": "1168:11:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_rational_15_by_1",
                            "typeString": "int_const 15"
                          },
                          "id": 2544,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "hexValue": "35",
                            "id": 2542,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1208:1:4",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_5_by_1",
                              "typeString": "int_const 5"
                            },
                            "value": "5"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "33",
                            "id": 2543,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1212:1:4",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_3_by_1",
                              "typeString": "int_const 3"
                            },
                            "value": "3"
                          },
                          "src": "1208:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_15_by_1",
                            "typeString": "int_const 15"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_15_by_1",
                            "typeString": "int_const 15"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "34",
                              "id": 2539,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1201:1:4",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_4_by_1",
                                "typeString": "int_const 4"
                              },
                              "value": "4"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_4_by_1",
                                "typeString": "int_const 4"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 2537,
                              "name": "_totalReleased",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2486,
                              "src": "1182:14:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 2538,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "mul",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2901,
                            "src": "1182:18:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 2540,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1182:21:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2541,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "div",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2925,
                        "src": "1182:25:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 2545,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1182:32:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1168:46:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2547,
                  "nodeType": "ExpressionStatement",
                  "src": "1168:46:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2548,
                    "name": "lastRound",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1601,
                    "src": "1291:9:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 2492,
                  "id": 2549,
                  "nodeType": "Return",
                  "src": "1284:16:4"
                }
              ]
            },
            "documentation": "@dev Artificially sets the last release round // auxiliary function for testing (simulating reward release)",
            "id": 2551,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 2489,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 2488,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 3043,
                  "src": "844:9:4",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "844:9:4"
              }
            ],
            "name": "setLastRound",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2487,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2482,
                  "name": "_roundNum",
                  "nodeType": "VariableDeclaration",
                  "scope": 2551,
                  "src": "768:17:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2481,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "768:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2484,
                  "name": "_lastRoundReward",
                  "nodeType": "VariableDeclaration",
                  "scope": 2551,
                  "src": "787:24:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2483,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "787:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2486,
                  "name": "_totalReleased",
                  "nodeType": "VariableDeclaration",
                  "scope": 2551,
                  "src": "813:22:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2485,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "813:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "767:69:4"
            },
            "returnParameters": {
              "id": 2492,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2491,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 2551,
                  "src": "863:7:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2490,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "863:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "862:9:4"
            },
            "scope": 2572,
            "src": "746:559:4",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2570,
              "nodeType": "Block",
              "src": "1466:121:4",
              "statements": [
                {
                  "assignments": [
                    2555
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2555,
                      "name": "devBalance",
                      "nodeType": "VariableDeclaration",
                      "scope": 2570,
                      "src": "1472:15:4",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2554,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "1472:4:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 2559,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 2557,
                        "name": "devFundAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1579,
                        "src": "1500:14:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 2556,
                      "name": "balanceOf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3157,
                      "src": "1490:9:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view returns (uint256)"
                      }
                    },
                    "id": 2558,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1490:25:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1472:43:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 2563,
                        "name": "devFundAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1579,
                        "src": "1539:14:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "3078313233",
                            "id": 2565,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1563:5:4",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_291_by_1",
                              "typeString": "int_const 291"
                            },
                            "value": "0x123"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_291_by_1",
                              "typeString": "int_const 291"
                            }
                          ],
                          "id": 2564,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "1555:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": "address"
                        },
                        "id": 2566,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1555:14:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 2567,
                        "name": "devBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2555,
                        "src": "1571:10:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 2560,
                        "name": "this",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3780,
                        "src": "1521:4:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_RelevantTokenMock_$2572",
                          "typeString": "contract RelevantTokenMock"
                        }
                      },
                      "id": 2562,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transferFrom",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3277,
                      "src": "1521:17:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,address,uint256) external returns (bool)"
                      }
                    },
                    "id": 2568,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1521:61:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2569,
                  "nodeType": "ExpressionStatement",
                  "src": "1521:61:4"
                }
              ]
            },
            "documentation": "@dev Artificially empties the devFund account of all accumulated tokens // auxiliary function for testing",
            "id": 2571,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "emptyDevBalance",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2552,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1456:2:4"
            },
            "returnParameters": {
              "id": 2553,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1466:0:4"
            },
            "scope": 2572,
            "src": "1432:155:4",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 2573,
        "src": "57:1532:4"
      }
    ],
    "src": "0:1590:4"
  },
  "legacyAST": {
    "absolutePath": "/Users/acrudol/Documents/Code/Relevant/token/contracts/mocks/RelevantTokenMock.sol",
    "exportedSymbols": {
      "RelevantTokenMock": [
        2572
      ]
    },
    "id": 2573,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2455,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:4"
      },
      {
        "absolutePath": "/Users/acrudol/Documents/Code/Relevant/token/contracts/RelevantToken.sol",
        "file": "../RelevantToken.sol",
        "id": 2456,
        "nodeType": "ImportDirective",
        "scope": 2573,
        "sourceUnit": 2454,
        "src": "25:30:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 2457,
              "name": "RelevantToken",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2453,
              "src": "87:13:4",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_RelevantToken_$2453",
                "typeString": "contract RelevantToken"
              }
            },
            "id": 2458,
            "nodeType": "InheritanceSpecifier",
            "src": "87:13:4"
          }
        ],
        "contractDependencies": [
          2453,
          2785,
          3113,
          3552,
          3601,
          3670,
          3726
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 2572,
        "linearizedBaseContracts": [
          2572,
          2453,
          3601,
          2785,
          3113,
          3552,
          3670,
          3726
        ],
        "name": "RelevantTokenMock",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 2465,
              "nodeType": "Block",
              "src": "264:93:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2463,
                    "name": "currentRound",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1597,
                    "src": "340:12:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 2462,
                  "id": 2464,
                  "nodeType": "Return",
                  "src": "333:19:4"
                }
              ]
            },
            "documentation": "@dev Return current round number // using the state variable set by setRoundNum, for testing",
            "id": 2466,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "roundNum",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2459,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "231:2:4"
            },
            "returnParameters": {
              "id": 2462,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2461,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 2466,
                  "src": "255:7:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2460,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "255:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "254:9:4"
            },
            "scope": 2572,
            "src": "214:143:4",
            "stateMutability": "view",
            "superFunction": 2392,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2479,
              "nodeType": "Block",
              "src": "557:60:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2475,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 2473,
                      "name": "currentRound",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1597,
                      "src": "563:12:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 2474,
                      "name": "_roundNum",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2468,
                      "src": "578:9:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "563:24:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2476,
                  "nodeType": "ExpressionStatement",
                  "src": "563:24:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2477,
                    "name": "currentRound",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1597,
                    "src": "600:12:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 2472,
                  "id": 2478,
                  "nodeType": "Return",
                  "src": "593:19:4"
                }
              ]
            },
            "documentation": "@dev Artificially increases current round number // auxiliary function for testing (simulating block progression)",
            "id": 2480,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setRoundNum",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2469,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2468,
                  "name": "_roundNum",
                  "nodeType": "VariableDeclaration",
                  "scope": 2480,
                  "src": "513:17:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2467,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "513:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "512:19:4"
            },
            "returnParameters": {
              "id": 2472,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2471,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 2480,
                  "src": "548:7:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2470,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "548:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "547:9:4"
            },
            "scope": 2572,
            "src": "492:125:4",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2550,
              "nodeType": "Block",
              "src": "872:433:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2496,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 2494,
                          "name": "_roundNum",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2482,
                          "src": "886:9:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 2495,
                          "name": "currentRound",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1597,
                          "src": "898:12:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "886:24:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4c6173742072656c65617365206d757374206265206265666f72652063757272656e7420726f756e64",
                        "id": 2497,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "912:43:4",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_0471d70cf2a035f7f7b048b3897a5462a01824880c0baa08bf457fc278eb36bb",
                          "typeString": "literal_string \"Last release must be before current round\""
                        },
                        "value": "Last release must be before current round"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_0471d70cf2a035f7f7b048b3897a5462a01824880c0baa08bf457fc278eb36bb",
                          "typeString": "literal_string \"Last release must be before current round\""
                        }
                      ],
                      "id": 2493,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        3744,
                        3745
                      ],
                      "referencedDeclaration": 3745,
                      "src": "878:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2498,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "878:78:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2499,
                  "nodeType": "ExpressionStatement",
                  "src": "878:78:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2502,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 2500,
                      "name": "lastRound",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1601,
                      "src": "962:9:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 2501,
                      "name": "_roundNum",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2482,
                      "src": "974:9:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "962:21:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2503,
                  "nodeType": "ExpressionStatement",
                  "src": "962:21:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2506,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 2504,
                      "name": "lastRoundReward",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1603,
                      "src": "989:15:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 2505,
                      "name": "_lastRoundReward",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2484,
                      "src": "1007:16:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "989:34:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2507,
                  "nodeType": "ExpressionStatement",
                  "src": "989:34:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2510,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 2508,
                      "name": "totalReleased",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1605,
                      "src": "1029:13:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 2509,
                      "name": "_totalReleased",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2486,
                      "src": "1045:14:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1029:30:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2511,
                  "nodeType": "ExpressionStatement",
                  "src": "1029:30:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2522,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 2512,
                      "name": "rewardFund",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1607,
                      "src": "1065:10:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_rational_15_by_1",
                            "typeString": "int_const 15"
                          },
                          "id": 2520,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "hexValue": "35",
                            "id": 2518,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1104:1:4",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_5_by_1",
                              "typeString": "int_const 5"
                            },
                            "value": "5"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "33",
                            "id": 2519,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1108:1:4",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_3_by_1",
                              "typeString": "int_const 3"
                            },
                            "value": "3"
                          },
                          "src": "1104:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_15_by_1",
                            "typeString": "int_const 15"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_15_by_1",
                            "typeString": "int_const 15"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "34",
                              "id": 2515,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1097:1:4",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_4_by_1",
                                "typeString": "int_const 4"
                              },
                              "value": "4"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_4_by_1",
                                "typeString": "int_const 4"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 2513,
                              "name": "_totalReleased",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2486,
                              "src": "1078:14:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 2514,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "mul",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2901,
                            "src": "1078:18:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 2516,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1078:21:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2517,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "div",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2925,
                        "src": "1078:25:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 2521,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1078:32:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1065:45:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2523,
                  "nodeType": "ExpressionStatement",
                  "src": "1065:45:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2534,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 2524,
                      "name": "airdropFund",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1609,
                      "src": "1116:11:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_rational_15_by_1",
                            "typeString": "int_const 15"
                          },
                          "id": 2532,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "hexValue": "35",
                            "id": 2530,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1156:1:4",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_5_by_1",
                              "typeString": "int_const 5"
                            },
                            "value": "5"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "33",
                            "id": 2531,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1160:1:4",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_3_by_1",
                              "typeString": "int_const 3"
                            },
                            "value": "3"
                          },
                          "src": "1156:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_15_by_1",
                            "typeString": "int_const 15"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_15_by_1",
                            "typeString": "int_const 15"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "34",
                              "id": 2527,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1149:1:4",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_4_by_1",
                                "typeString": "int_const 4"
                              },
                              "value": "4"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_4_by_1",
                                "typeString": "int_const 4"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 2525,
                              "name": "_totalReleased",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2486,
                              "src": "1130:14:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 2526,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "mul",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2901,
                            "src": "1130:18:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 2528,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1130:21:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2529,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "div",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2925,
                        "src": "1130:25:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 2533,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1130:32:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1116:46:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2535,
                  "nodeType": "ExpressionStatement",
                  "src": "1116:46:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2546,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 2536,
                      "name": "reserveFund",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1611,
                      "src": "1168:11:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_rational_15_by_1",
                            "typeString": "int_const 15"
                          },
                          "id": 2544,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "hexValue": "35",
                            "id": 2542,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1208:1:4",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_5_by_1",
                              "typeString": "int_const 5"
                            },
                            "value": "5"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "33",
                            "id": 2543,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1212:1:4",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_3_by_1",
                              "typeString": "int_const 3"
                            },
                            "value": "3"
                          },
                          "src": "1208:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_15_by_1",
                            "typeString": "int_const 15"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_15_by_1",
                            "typeString": "int_const 15"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "34",
                              "id": 2539,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1201:1:4",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_4_by_1",
                                "typeString": "int_const 4"
                              },
                              "value": "4"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_4_by_1",
                                "typeString": "int_const 4"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 2537,
                              "name": "_totalReleased",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2486,
                              "src": "1182:14:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 2538,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "mul",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2901,
                            "src": "1182:18:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 2540,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1182:21:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2541,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "div",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2925,
                        "src": "1182:25:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 2545,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1182:32:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1168:46:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2547,
                  "nodeType": "ExpressionStatement",
                  "src": "1168:46:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2548,
                    "name": "lastRound",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1601,
                    "src": "1291:9:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 2492,
                  "id": 2549,
                  "nodeType": "Return",
                  "src": "1284:16:4"
                }
              ]
            },
            "documentation": "@dev Artificially sets the last release round // auxiliary function for testing (simulating reward release)",
            "id": 2551,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 2489,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 2488,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 3043,
                  "src": "844:9:4",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "844:9:4"
              }
            ],
            "name": "setLastRound",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2487,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2482,
                  "name": "_roundNum",
                  "nodeType": "VariableDeclaration",
                  "scope": 2551,
                  "src": "768:17:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2481,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "768:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2484,
                  "name": "_lastRoundReward",
                  "nodeType": "VariableDeclaration",
                  "scope": 2551,
                  "src": "787:24:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2483,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "787:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2486,
                  "name": "_totalReleased",
                  "nodeType": "VariableDeclaration",
                  "scope": 2551,
                  "src": "813:22:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2485,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "813:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "767:69:4"
            },
            "returnParameters": {
              "id": 2492,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2491,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 2551,
                  "src": "863:7:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2490,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "863:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "862:9:4"
            },
            "scope": 2572,
            "src": "746:559:4",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2570,
              "nodeType": "Block",
              "src": "1466:121:4",
              "statements": [
                {
                  "assignments": [
                    2555
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2555,
                      "name": "devBalance",
                      "nodeType": "VariableDeclaration",
                      "scope": 2570,
                      "src": "1472:15:4",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2554,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "1472:4:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 2559,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 2557,
                        "name": "devFundAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1579,
                        "src": "1500:14:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 2556,
                      "name": "balanceOf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3157,
                      "src": "1490:9:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view returns (uint256)"
                      }
                    },
                    "id": 2558,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1490:25:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1472:43:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 2563,
                        "name": "devFundAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1579,
                        "src": "1539:14:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "3078313233",
                            "id": 2565,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1563:5:4",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_291_by_1",
                              "typeString": "int_const 291"
                            },
                            "value": "0x123"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_291_by_1",
                              "typeString": "int_const 291"
                            }
                          ],
                          "id": 2564,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "1555:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": "address"
                        },
                        "id": 2566,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1555:14:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 2567,
                        "name": "devBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2555,
                        "src": "1571:10:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 2560,
                        "name": "this",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3780,
                        "src": "1521:4:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_RelevantTokenMock_$2572",
                          "typeString": "contract RelevantTokenMock"
                        }
                      },
                      "id": 2562,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transferFrom",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3277,
                      "src": "1521:17:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,address,uint256) external returns (bool)"
                      }
                    },
                    "id": 2568,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1521:61:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2569,
                  "nodeType": "ExpressionStatement",
                  "src": "1521:61:4"
                }
              ]
            },
            "documentation": "@dev Artificially empties the devFund account of all accumulated tokens // auxiliary function for testing",
            "id": 2571,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "emptyDevBalance",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2552,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1456:2:4"
            },
            "returnParameters": {
              "id": 2553,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1466:0:4"
            },
            "scope": 2572,
            "src": "1432:155:4",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 2573,
        "src": "57:1532:4"
      }
    ],
    "src": "0:1590:4"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.2",
  "updatedAt": "2019-05-18T09:08:44.589Z",
  "devdoc": {
    "methods": {
      "allocateAirdrops(uint256)": {
        "details": "Allocate airdrop rewards",
        "params": {
          "_rewards": "to be reserved for user claims"
        }
      },
      "allocateRewards(uint256)": {
        "details": "Allocate curation rewards",
        "params": {
          "_rewards": "to be reserved for users claims"
        }
      },
      "allowance(address,address)": {
        "details": "Function to check the amount of tokens that an owner allowed to a spender.",
        "params": {
          "owner": "address The address which owns the funds.",
          "spender": "address The address which will spend the funds."
        },
        "return": "A uint256 specifying the amount of tokens still available for the spender."
      },
      "approve(address,uint256)": {
        "details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
        "params": {
          "spender": "The address which will spend the funds.",
          "value": "The amount of tokens to be spent."
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "owner": "The address to query the balance of."
        },
        "return": "An uint256 representing the amount owned by the passed address."
      },
      "claimTokens(uint256,bytes)": {
        "details": "Claim curation reward tokens (to be called by user)",
        "params": {
          "_amount": "amount to be transferred to user",
          "_sig": "Signature by contract owner authorizing the transaction"
        }
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.",
        "params": {
          "spender": "The address which will spend the funds.",
          "subtractedValue": "The amount of tokens to decrease the allowance by."
        }
      },
      "emptyDevBalance()": {
        "details": "Artificially empties the devFund account of all accumulated tokens // auxiliary function for testing"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.",
        "params": {
          "addedValue": "The amount of tokens to increase the allowance by.",
          "spender": "The address which will spend the funds."
        }
      },
      "initialize(string,uint8,string,string,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "ContPreInflationaryToken constructor",
        "params": {
          "_devFundAddress": "Address that receives and manages newly minted tokens for development fund",
          "_initRoundReward": "Number of released inflationary tokens per round during the first round",
          "_roundDecay": "Decay factor for the reward reduction during one round - can be calculated from timeConstant and roundLength",
          "_roundLength": "Number of blocks that make up an inflation release round",
          "_targetInflation": "Target inflation rate per round at which the reward decay should stop - can be calculated from target yearly inflation rate",
          "_targetRound": "Number of round from which inflation stays constant - can be calculated from timeConstant, initRoundReward and targetInflation",
          "_timeConstant": "Number of blocks after which reward reduces to 37% of initial value during exponential decay - can be calculated from half-life",
          "_totalPremint": "Rewards that are preminted (all until decay stops) - can be calculated from timeConstant, initRoundReward and targetInflation"
        }
      },
      "isOwner()": {
        "return": "true if `msg.sender` is the owner of the contract."
      },
      "mint(address,uint256)": {
        "details": "Function to mint tokens",
        "params": {
          "to": "The address that will receive the minted tokens.",
          "value": "The amount of tokens to mint."
        },
        "return": "A boolean that indicates if the operation was successful."
      },
      "nonceOf(address)": {
        "details": "Nonce of user",
        "params": {
          "_account": "User account address"
        },
        "return": "nonce of user"
      },
      "owner()": {
        "return": "the address of the owner."
      },
      "partialSum(uint256)": {
        "details": "Calculates total number of tokens to be minted during the decay phase until _round",
        "params": {
          "_round": "Round until which the partial sum is taken"
        }
      },
      "releaseTokens()": {
        "details": "Compute and release currently releasable inflationary rewards"
      },
      "renounceOwnership()": {
        "details": "Allows the current owner to relinquish control of the contract."
      },
      "roundNum()": {
        "details": "Return current round number // using the state variable set by setRoundNum, for testing"
      },
      "roundsSincleLast()": {
        "details": "Return rounds since last release"
      },
      "setLastRound(uint256,uint256,uint256)": {
        "details": "Artificially sets the last release round // auxiliary function for testing (simulating reward release)"
      },
      "setRoundNum(uint256)": {
        "details": "Artificially increases current round number // auxiliary function for testing (simulating block progression)"
      },
      "totalSupply()": {
        "details": "Total number of tokens in existence"
      },
      "transfer(address,uint256)": {
        "details": "Transfer token for a specified address",
        "params": {
          "to": "The address to transfer to.",
          "value": "The amount to be transferred."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfer tokens from one address to another. Note that while this function emits an Approval event, this is not required as per the specification, and other compliant implementations may not emit the event.",
        "params": {
          "from": "address The address which you want to send tokens from",
          "to": "address The address which you want to transfer to",
          "value": "uint256 the amount of tokens to be transferred"
        }
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "renounceOwnership()": {
        "notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
      }
    }
  }
}